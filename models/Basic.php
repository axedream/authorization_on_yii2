<?php

namespace app\models;

use yii\db\ActiveRecord;
use Yii;
use yii\helpers\StringHelper;

/**
 * Class Basic
 * @package app\models
 * @property array $filter;
 * @property integer $limit
 * @property integer $offset
 * @property integer $rand
 * @property string $sort
 * @property array $condition_access
 * @property array $attr
 * @property array $select
 * @property array $convert
 * @property array $resp
 * @property integer $page_post
 * @property array $sort_post
 */
class Basic extends ActiveRecord
{
    public $console_controller = ['create_fb'];

    public $msg;
    public $error;
    public $error_type;
    public $data;

    public $filter=[];
    public $select=[];

    public $condition_access = ['in','IN','=','<','>','<=','>='];

    public $attr;

    public $limit = 0;
    public $offset = 0;

    public $sort;

    public $debug = FALSE;

    public $rand = FALSE;


    public $resp = [];

    /**
     * По умолчанию доступ чтения к таблице через API закрыт
     *
     * @var bool
     */
    public static $get_model_api = FALSE;

    /**
     * По умолчанию достпу записе к таблице через API закрыт
     *
     * @var bool
     */
    public static $set_model_api = FALSE;

    /**
     * Массив ограничений на выдачу полей / если FALSE выдача разрешена по всем полям
     *
     * @var bool | array
     */
    public static $array_access_row = FALSE;


    /**
     * Массив для перебора пост данных (для записи)
     *
     * @var array
     */
    public $post_data = [];


    /**
     * Свойство переданных данных POST
     *
     * @var mixed
     */
    public $input_data;


    /**
     * Сессия
     *
     * @var
     */
    public $session;


    public $sort_post = 'id DESC';
    public $page_post = 0;


    public $cn = [];

    public function beforeSave($insert)
    {
        $name = self::getTableSchema()->name;
        $action = Yii::$app->controller->action->id;
        $controller = Yii::$app->controller->id;

        if (LogActionName::find()->where(['action'=>$action,'controller'=>$controller,'model'=>$name])->exists()) {
            $model_log_action_name = LogActionName::findOne(['action'=>$action,'controller'=>$controller,'model'=>$name]);
            $log_action_name_uid = $model_log_action_name->uid;

            $log_row = new LogRow();
            $log_row->log_action_name_uid = (int)$log_action_name_uid;
            $log_row->user_id = (isset(Yii::$app->user->identity->id)) ? (int)Yii::$app->user->identity->id : 0;
            $log_row->action_date = self::getNowDateTime();
            $log_row->post = (Yii::$app->request->post()) ? json_encode(Yii::$app->request->post()) : '';
            if (!$this->isNewRecord) {
                $log_row->before_data = json_encode($this->oldAttributes);
            } else {
                $log_row->before_data = "new record";
            }
            $log_row->after_data = json_encode($this->attributes);
            $log_row->save();

        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        $name = self::getTableSchema()->name;
        $action = Yii::$app->controller->action->id;
        $controller = Yii::$app->controller->id;

        if (LogActionName::find()->where(['action'=>$action,'controller'=>$controller,'model'=>$name])->exists()) {
            $model_log_action_name = LogActionName::findOne(['action'=>$action,'controller'=>$controller,'model'=>$name]);
            $action_name_id = $model_log_action_name->id;

            $log_row = new LogRow();
            $log_row->log_action_name_uid = $model_log_action_name->uid;
            $log_row->user_id = (isset(Yii::$app->user->identity->id)) ? (int)Yii::$app->user->identity->id : 0;
            $log_row->action_date = self::getNowDateTime();
            $log_row->post = (Yii::$app->request->post()) ? json_encode(Yii::$app->request->post()) : 0;
            $log_row->before_data = json_encode($this->attributes);
            $log_row->after_data = "row deleted";
            $log_row->save();

        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * Функция загразуки с ajax форма
     *
     * @param mixed $_data
     * @return bool
     */
    public function load_ajax($_data=FALSE) {
        if ($_data) {
            $modelName = \yii\helpers\StringHelper::basename(get_class($this));
            if (isset($_data[$modelName])) {
                $data = $_data[$modelName];
                $array_atr = $this->attributes();
                foreach ($this->attributes() as $atr) {
                    if (isset($data[$atr]) && $data[$atr]!='id') {
                        $this->$atr = $data[$atr];
                    }
                }
                return true;
            }
        }
        return false;
    }

    public function rules()
    {
        return
            [
                [['sort_post','page_post'], 'safe'],
            ];
    }

    public function set_data_table() {
        $model = $this;
        $m = new $this();
        //добавление/редактирование данных в модели
        if ($model->filter['type'] == 'save' && method_exists($model,'run_save')) {
            $m_ = $m->run_save($model->filter['values']);
            if ($m_) {
                $out = [];
                foreach ($m_ as $m__) {
                    $out[] = (isset($m__->id)) ? $m__->id : 0;
                }
                $model->error = 'no';
                $model->error_type = 100;
                $model->msg = Yii::$app->params['messages']['request']['success']['save'];
                return [
                    'id' => $out,
                ];
            }
        } else {
            $model->error = 'yes';
            $model->error_type = 204;
            $model->msg =  Yii::$app->params['messages']['request']['error']['method_api'];
        }

        //удаление данных в модели
        if ($model->filter['type'] == 'delete' && method_exists($m,'run_delete')) {
            $md_ = $m->run_delete($model->filter['values']);
            if ($md_) {
                $model->error = 'no';
                $model->error_type = 100;
                $model->msg = Yii::$app->params['messages']['request']['success']['delete'];

            }
        } else {
            $model->error = 'yes';
            $model->error_type = 204;
            $model->msg =  Yii::$app->params['messages']['request']['error']['method_api'];
        }

        return FALSE;
    }


    /**
     * Преобразуем массив значений в зависимости от типа условия
     *
     * @param mixed $condition
     * @return mixed
     */
    public function transform_value($key=FALSE,$condition=FALSE,$value=FALSE)
    {
        if (is_array($value) && $condition && $key) {
            $out = '';
            $where = '';
            switch (mb_strtolower($condition)) {

                case 'in' :
                    $out .= $key.' IN (';
                    foreach ($value as $v) {
                        if ($where == '') {
                            $where = '"'.$v.'"';
                        } else {
                            $where .= ',"'.$v.'"';
                        }
                    }
                    $out .= $where.')';
                break;

                case '=' :
                    $out .= $key.' = "';
                    foreach ($value as $v) {
                        $where .= $v;
                    }
                    $out .= $where .'"';
                break;

                case '>' :
                    $out .= $key.' > "';
                    foreach ($value as $v) {
                        $where .= $v;
                    }
                    $out .= $where .'"';
                break;

                case '>=' :
                    $out .= $key.' >= "';
                    foreach ($value as $v) {
                        $where .= $v;
                    }
                    $out .= $where .'"';
                break;

                case '<' :
                    $out .= $key.' < "';
                    foreach ($value as $v) {
                        $where .= $v;
                    }
                    $out .= $where .'"';
                    break;

                case '<=' :
                    $out .= $key.' <= "';
                    foreach ($value as $v) {
                        $where .= $v;
                    }
                    $out .= $where .'"';
                    break;

            }
            return $out;
        }
        return FALSE;
    }



    public function get_data_table()
    {
        $model = $this;
        $m = $this->find();
        $count = $m->count();

        //строим SELECT
        $array = [];
        if (count($model->select)) foreach ($model->select as $s) {
            if (in_array($s,$this->attr)) {
                $array[] = $s;
            }
        }
        if (count($array)) {
            $m->select($array);
        }

        //конвертер фильтра
        if (method_exists($model,'convert')) {
            //получаем массив конвертации ( в случае сопоставления и нахождения значений переменных - конвертируем их в необходимые значения)
            $vv = $model->convert();
            if (is_array($vv)) foreach ($vv as $key => $value) {
                if (count($model->filter)) for ($i=0; $i<count($model->filter);$i++) {
                    if ($model->filter[$i]['key'] == $key) {
                        for ($j=0; $j<count($model->filter[$i]['value']);$j++) {
                            foreach ($value as $f_k => $f_v) {
                                if ($model->filter[$i]['value'][$j] == $f_v) {
                                    $model->filter[$i]['value'][$j] = $f_k;
                                }

                            }
                        }

                    }

                }
            }
        }


        //строим WHERE
        if (count($model->filter)) foreach ($model->filter as $f) {
            if (in_array($f['key'],$model->attr) && in_array(mb_strtolower($f['condition']),$model->condition_access) ){

                if (in_array($f['key'],$this->attr)) {
                    //$m->andWhere($this->transform_value($f['key'],$f['condition'],$f['value']));

                    if($f['condition'] == "=") {
                        $m->andWhere([$f['key']=>$f['value']]);
                    } else {
                        $f['condition'] = mb_strtolower($f['condition']);
                        $react = 0;

                        //если исключительный вариант IN в 1 экземпляре, выполняем через =
                        if (count($f['value']) == '1' && $f['condition'] == 'IN') {
                            $m->andWhere([$f['key']=>$f['value']]);
                            $react = 1;
                        }

                        if (in_array($f['condition'],['<','>','<=','>='])) {
                            $m->andWhere([$f['condition'],$f['key'],$f['value'][0]]);
                            $react = 1;
                        }

                        if (!$react) {
                            $m->andWhere([$f['condition'],$f['key'],$f['value']]);
                        }
                    }
                }
            } else {
                $_method = $f['key'];
                if (method_exists($model,$_method)) {
                    $model->$_method($m,$f['value'],$f['condition']);
                }
            }
        }


        //конвертер фильтра
        if (method_exists($model,'wh')) {
            $model->wh($m);
        }

        if ($this->limit) {
            $m->limit($this->limit);
        }

        if ($this->offset) {
            $m->offset($this->offset);
        }

        if ($this->sort && $this->sort!='' && !$this->rand) {
            $m->orderBy($this->sort);
        }

        if ($this->rand) {
            $m->orderBy('RAND()');
        }

        if ($this->debug) {
            $sql = $m->createCommand()->rawSql;
        }

        $mm = $m;

        $result = $m->asArray()->all();

        //пост обработка данных
        if (method_exists($model,'run_load')) {
            $result = $model->run_load($result,$mm);
        }

        $this->resp['name']  = 'Данные таблицы : '.$model::tableName();
        $this->resp['count'] = (($m) ? $m->count(): 0);
        $this->resp['count_all'] = (($count) ? $count : '-');
        $this->resp['limit'] = (($this->limit) ? $this->limit : 0);
        $this->resp['offset'] = (($this->offset) ? $this->offset : 0);
        $this->resp['sort'] = (($this->sort) ? $this->sort : 0);
        $this->resp['sql'] =  (($sql) ?  $sql : 0);
        $this->resp['data'] = (($m) ? $result : '');

        return $this->resp;
    }


    /**
     * Дополнительные атрибуты (не фильтрующие)
     *
     * @return array
     */
    public function attribute_add()
    {
        return [];
    }


    public function wh()
    {
        return FALSE;
    }


    /**
     * Первичная инициализация для всех моделей
     */
    public function init()
    {
        $controller = isset(Yii::$app->controller->id) ? Yii::$app->controller->id : FALSE ;
        if (!in_array($controller,$this->console_controller)) {
            try {
                if (isset(Yii::$app->session)   ) {
                    $this->session = Yii::$app->session;
                    if (!$this->session->isActive) {
                        $this->session->open();
                    }
                }
            } catch (\Exception $ex) {
                $error = 1;
            }
        }
    }

    /**
     * Получаем актуальную дату время
     *
     * @return string
     * @throws \Exception
     */
    public static function getNowDateTime()
    {
        $dateFile = new \DateTime();
        return $dateFile->format('Y-m-d H:i:s');
    }

    public static function getNowDate()
    {
        $dateFile = new \DateTime();
        return $dateFile->format('Y-m-d');
    }

}